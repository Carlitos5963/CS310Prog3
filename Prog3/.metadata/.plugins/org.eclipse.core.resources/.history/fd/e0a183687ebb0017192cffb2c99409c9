import data_structures.*;

public class MazeSolver {
	private Stack stack;
	private Queue queue;
	private int distance;
	private GridCell terminalCell;
	
	
	//The constructor. Takes a single argument, the number of rows and columns in the grid. 
	//Suggested values are 25 .. 50.
	public MazeSolver(int dimension) {
		
	}
	
	//This method runs the breadth first traversal, and marks each 
	//reachable cell in the grid with its distance from the origin.
	public void mark() {
		//enqueue cell(0,0)
		while(!queue.isEmpty()) {
		    //dequeue a GridCell from the queue.
		    //mark each adjacent neighboring cell and enqueue it
		    }
	}
	
	//Does part two, indicates in the GUI the shortest path found.
	public boolean move() {
		distance = terminalCell.getDistance();
		if(distance == -1) return false;  // unreachable, puzzle has no solution
		stack.push(terminalCell);
		while(distance != 0) {
		    //get distance from each cell adjacent to the top of the stack
		    //select the cell with smallest distance and push on the stack
		    }
		while(!stack.isEmpty()) {
		    //pop grid cell off the stack and mark it
		    }
	}

	//Reinitializes the puzzle. Clears the stack and queue (calls makeEmpty() ).
	public void reset() {
		stack.makeEmpty();
		queue.makeEmpty();
	}
}
