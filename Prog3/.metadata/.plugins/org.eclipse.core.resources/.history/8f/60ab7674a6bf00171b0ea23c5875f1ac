import data_structures.*;

public class MazeSolver {
	private Stack<GridCell> stack;
	private Queue<GridCell> queue;
	private int dimension;
	private int shortestDist;
	private GridCell terminalCell;
	private MazeGrid maze;
	
	
	//The constructor. Takes a single argument, the number of rows and columns in the grid. 
	//Suggested values are 25 .. 50.
	public MazeSolver(int dimension) {
		maze = new MazeGrid(this, dimension);
		stack = new Stack<GridCell>();
		queue = new Queue<GridCell>();
		this.dimension = dimension;

		//MazeGrid maze = new MazeGrid(this, dimension);  --> Unsure
	}
	
	//This method runs the breadth first traversal, and marks each 
	//reachable cell in the grid with its distance from the origin.
	public void mark() {
		GridCell first = maze.getCell(0,0);
		int currDistance = 0;
	    first.setDistance(currDistance);
	    maze.markDistance(first);
		queue.enqueue(first);
		while(!queue.isEmpty()) {
			currDistance++;
		    GridCell c = queue.dequeue();
		    //distance++;
		    //c.setDistance(0);
		    //maze.markDistance(c);
		    int x = c.getX();
		    int y = c.getY();
		    GridCell up = maze.getCell(x, y+1);
		    GridCell right = maze.getCell(x+1, y);
		    GridCell down = maze.getCell(x, y-1);
		    GridCell left = maze.getCell(x-1, y);

		    if(maze.isValidMove(up) && !up.wasVisited()) {
		    	up.setDistance(c.getDistance() + 1);
		    	maze.markDistance(up);
		    	queue.enqueue(up);
		    }
		    if(maze.isValidMove(right) && !right.wasVisited()) {
		    	right.setDistance(c.getDistance() + 1);
		    	maze.markDistance(right);
		    	queue.enqueue(right);
		    }
		    if(maze.isValidMove(down) && !down.wasVisited()) {
		    	down.setDistance(c.getDistance() + 1);
		    	maze.markDistance(down);
		    	queue.enqueue(down);
		    }
		    if(maze.isValidMove(left) && !left.wasVisited()) {
		    	left.setDistance(c.getDistance() + 1);
		    	maze.markDistance(left);
		    	queue.enqueue(left);
		    }
		    }
	}
	
	//Does part two, indicates in the GUI the shortest path found.
	public boolean move() {
		int upDist = 9999, rightDist = 9999, downDist = 9999, leftDist = 9999;
		terminalCell = maze.getCell(dimension-1, dimension-1);
		shortestDist = terminalCell.getDistance();
		if(shortestDist == -1) return false;  // unreachable, puzzle has no solution
		stack.push(terminalCell);
		
		while(shortestDist != 0) {
		    //get distance from each cell adjacent to the top of the stack
			GridCell current = stack.pop();
			current.getX();
			current.getY();
			GridCell up = maze.getCell(current.getX(), current.getY() + 1);
			if(maze.isValidMove(up))
				upDist = up.getDistance();
			
			GridCell right = maze.getCell(current.getX() + 1, current.getY());
			if(maze.isValidMove(right))
				rightDist = right.getDistance();
			
			GridCell down = maze.getCell(current.getX(), current.getY() - 1);
			if(maze.isValidMove(down))
				downDist = down.getDistance();
			
			GridCell left = maze.getCell(current.getX() - 1, current.getY());
			if(maze.isValidMove(left))
				leftDist = left.getDistance();
			
		    //select the cell with smallest distance and push on the stack
			if(upDist <= rightDist && upDist <= downDist && upDist <= leftDist)
				stack.push(up);
			else if(rightDist <= upDist && rightDist <= downDist && rightDist <= leftDist)
				stack.push(right);
			else if(downDist <= rightDist && downDist <= upDist && downDist <= leftDist)
				stack.push(down);
			else
				stack.push(left);
		    }
		while(!stack.isEmpty()) {
		    //pop grid cell off the stack and mark it
			maze.markMove(stack.pop());
		    }
		return true;
	}

	//Reinitializes the puzzle. Clears the stack and queue (calls makeEmpty() ).
	public void reset() {
		stack.makeEmpty();
		queue.makeEmpty();
	}
	
	public static void main(String[] args) {
		MazeSolver maze = new MazeSolver(25);
		
	}
}
