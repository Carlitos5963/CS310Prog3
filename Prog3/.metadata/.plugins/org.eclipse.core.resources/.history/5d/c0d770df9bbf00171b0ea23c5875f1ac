import data_structures.*;

public class MazeSolver {
	private Stack stack;
	private Queue queue;
	private int distance;
	private GridCell terminalCell;
	private MazeGrid maze;
	
	
	//The constructor. Takes a single argument, the number of rows and columns in the grid. 
	//Suggested values are 25 .. 50.
	public MazeSolver(int dimension) {
		maze = new MazeGrid(this, dimension);
		stack = new Stack<GridCell>();
		queue = new Queue<GridCell>();

		//MazeGrid maze = new MazeGrid(this, dimension);  --> Unsure
	}
	
	//This method runs the breadth first traversal, and marks each 
	//reachable cell in the grid with its distance from the origin.
	public void mark() {
		//enqueue cell(0,0) --> Unsure
		GridCell first = maze.getCell(0,0);
	    first.setDistance(0);
	    maze.markDistance(first);
		queue.enqueue(first);
		while(!queue.isEmpty()) {
		    GridCell c = (GridCell)queue.dequeue();
		    //distance++;
		    //c.setDistance(0);
		    //maze.markDistance(c);
		    int x = c.getX();
		    int y = c.getY();
		    GridCell up = new GridCell(x, y+1);
		    GridCell right = new GridCell(x+1, y);
		    GridCell down = new GridCell(x, y-1);
		    GridCell left = new GridCell(x-1, y);

		    if(maze.isValidMove(up) && !up.wasVisited()) {
		    	up.setDistance(distance);
		    	maze.markDistance(up);
		    	queue.enqueue(up);
		    }
		    if(maze.isValidMove(right) && !right.wasVisited()) {
		    	right.setDistance(distance);
		    	maze.markDistance(right);
		    	queue.enqueue(right);
		    }
		    if(maze.isValidMove(down) && !down.wasVisited()) {
		    	down.setDistance(distance);
		    	maze.markDistance(down);
		    	queue.enqueue(down);
		    }
		    if(maze.isValidMove(left) && !left.wasVisited()) {
		    	left.setDistance(distance);
		    	maze.markDistance(left);
		    	queue.enqueue(left);
		    }
		    }
	}
	
	//Does part two, indicates in the GUI the shortest path found.
	public boolean move() {
		distance = terminalCell.getDistance();
		if(distance == -1) return false;  // unreachable, puzzle has no solution
		stack.push(terminalCell);
		while(distance != 0) {
		    //get distance from each cell adjacent to the top of the stack
		    //select the cell with smallest distance and push on the stack
		    }
		while(!stack.isEmpty()) {
		    //pop grid cell off the stack and mark it
		    }
	}

	//Reinitializes the puzzle. Clears the stack and queue (calls makeEmpty() ).
	public void reset() {
		stack.makeEmpty();
		queue.makeEmpty();
	}
	
	public static void main(String[] args) {
		MazeSolver maze = new MazeSolver(50);
		
	}
}
